generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String           @id @default(cuid())
  firstName       String?
  lastName        String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            String           @default("USER")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  studentId       String?
  nationality     String?
  homeCity        String?
  homeCountry     String?
  accounts        Account[]
  sessions        Session[]
  applications    Application[]
  formSubmissions FormSubmission[]
  erasmusExperience ErasmusExperience? // One-to-one relationship
  stories         Story[]
  storyEngagements Engagement[]

  @@map("users")
}

model University {
  id                String        @id @default(cuid())
  code              String        @unique
  name              String
  shortName         String
  type              String
  country           String
  city              String
  website           String?
  description       String?
  imageUrl          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  homeAgreements    Agreement[]   @relation("HomeUniversity")
  partnerAgreements Agreement[]   @relation("PartnerUniversity")
  applications      Application[]
  faculties         Faculty[]
  stories           Story[]

  @@map("universities")
}

model Faculty {
  id           String       @id @default(cuid())
  name         String
  description  String?
  universityId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  departments  Department[]
  university   University   @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@map("faculties")
}

model Department {
  id          String      @id @default(cuid())
  name        String
  description String?
  facultyId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  agreements  Agreement[]
  faculty     Faculty     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  programs    Program[]

  @@map("departments")
}

model Program {
  id           String        @id @default(cuid())
  name         String
  level        String
  duration     String
  type         String?
  ects         Int?
  description  String?
  departmentId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  department   Department    @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@map("programs")
}

model Agreement {
  id                  String        @id @default(cuid())
  homeUniversityId    String
  homeDepartmentId    String
  partnerUniversityId String
  partnerCity         String
  partnerCountry      String
  agreementType       String        @default("BOTH")
  notes               String?
  isActive            Boolean       @default(true)
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  homeUniversity      University    @relation("HomeUniversity", fields: [homeUniversityId], references: [id])
  homeDepartment      Department    @relation(fields: [homeDepartmentId], references: [id])
  partnerUniversity   University    @relation("PartnerUniversity", fields: [partnerUniversityId], references: [id])
  applications        Application[]

  @@map("agreements")
}

model Application {
  id               String     @id @default(cuid())
  userId           String
  homeUniversityId String
  programId        String
  agreementId      String
  status           String     @default("DRAFT")
  semester         String?
  academicYear     String?
  duration         String?
  motivation       String?
  languageSkills   Json?
  grades           Json?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  user             User       @relation(fields: [userId], references: [id])
  homeUniversity   University @relation(fields: [homeUniversityId], references: [id])
  program          Program    @relation(fields: [programId], references: [id])
  agreement        Agreement  @relation(fields: [agreementId], references: [id])

  @@map("applications")
}

model Story {
  id           String             @id @default(cuid())
  title        String
  content      String
  excerpt      String?
  imageUrl     String?
  isPublic     Boolean            @default(true)
  isPinned     Boolean            @default(false)
  authorId     String
  universityId String?
  country      String?
  city         String?
  category     String             @default("EXPERIENCE")
  tags         String?
  likes        Int                @default(0)
  views        Int                @default(0)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  author       User               @relation(fields: [authorId], references: [id])
  university   University?        @relation(fields: [universityId], references: [id])
  engagements  Engagement[]

  @@index([city, country])
  @@map("stories")
}

model Engagement {
  id          String    @id @default(cuid())
  storyId     String
  userId      String
  liked       Boolean   @default(false)
  bookmarked  Boolean   @default(false)
  rating      Int       @default(0)
  views       Int       @default(0)
  likes       Int       @default(0)
  comments    Int       @default(0)
  lastViewed  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId])
  @@map("story_engagements")
}

model Accommodation {
  id            String   @id @default(cuid())
  name          String
  type          String
  description   String?
  address       String
  city          String
  country       String
  pricePerMonth Decimal?
  currency      String?
  imageUrl      String?
  amenities     Json?
  contactInfo   Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("accommodations")
}

model Destination {
  id               String   @id @default(cuid())
  name             String
  city             String
  country          String
  description      String?
  imageUrl         String?
  featured         Boolean  @default(false)
  status           String   @default("published") // published, draft, under_review
  source           String   @default("admin_created") // user_generated, admin_created, hybrid

  // Content fields
  climate          String?
  costOfLiving     Json?
  highlights       String?
  photos           Json?    // Array of photo objects with url, caption, credit
  generalInfo      Json?    // Object with cityOverview, culturalNotes, practicalTips, etc.

  // Admin workflow fields
  aggregatedData   Json?    // Statistics from user submissions
  adminOverrides   Json?    // Admin customizations and enhancements
  submissionCount  Int      @default(0)
  lastDataUpdate   DateTime @default(now())

  // Relationships
  linkedSubmissions DestinationSubmission[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([city, country])
  @@map("destinations")
}

model FormSubmission {
  id         String   @id @default(cuid())
  userId     String
  type       String
  title      String
  data       Json
  status     String   @default("SUBMITTED")
  adminNotes String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("form_submissions")
}

model ErasmusExperience {
  id              String    @id @default(cuid())
  userId          String    @unique // One submission per user

  // Progress tracking
  currentStep     Int       @default(1)
  completedSteps  String    @default("[]") // JSON array of completed step numbers
  isComplete      Boolean   @default(false)

  // Form data sections
  basicInfo       Json?     // Step 1: Basic Information
  courses         Json?     // Step 2: Course Matching
  accommodation   Json?     // Step 3: Accommodation
  livingExpenses  Json?     // Step 4: Living Expenses
  experience      Json?     // Step 5: Experience & Help Future Students

  // Metadata
  status          String    @default("DRAFT") // DRAFT, IN_PROGRESS, COMPLETED, PUBLISHED
  isPublic        Boolean   @default(false)
  lastSavedAt     DateTime  @default(now())
  submittedAt     DateTime?
  publishedAt     DateTime?

  // Admin management
  adminNotes      String?
  adminApproved   Boolean   @default(false)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("erasmus_experiences")
}

model CustomDestination {
  id            String   @id @default(cuid())
  destinationId String   @unique
  data          Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("custom_destinations")
}

model AdminDestination {
  id           String   @id @default(cuid())
  name         String   // Display name (e.g., "Barcelona, Spain")
  city         String   // City name for matching with student data
  country      String   // Country name for matching with student data

  // Admin-curated content
  description  String   // Rich description of the destination
  imageUrl     String?  // Hero image URL
  climate      String?  // Climate information
  highlights   Json?    // Array of highlight strings

  // Official information
  officialUniversities Json? // Array of university objects {name, website, programs[]}
  generalInfo  Json?    // {language, currency, timeZone, publicTransport, etc.}

  // Student data cache (automatically updated)
  studentDataCache Json?    // Cached CityAggregatedData
  hasStudentData   Boolean @default(false)
  lastDataUpdate   DateTime?

  // Admin management
  featured     Boolean  @default(false)
  active       Boolean  @default(true)
  createdBy    String   // Admin user ID
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Ensure unique city/country combinations
  @@unique([city, country])
  @@map("admin_destinations")
}

model UniversityExchange {
  id                  String   @id @default(cuid())
  hostUniversity      String
  hostCountry         String
  hostCity            String
  studyLevel          String
  fieldOfStudy        String
  description         String?
  imageUrl            String?
  highlights          String?
  requirements        String?
  applicationDeadline String?
  totalEcts           Int?
  language            String   @default("English")
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("university_exchanges")
}

// New models for auto-generated destination content

model GeneratedDestination {
  id                    String   @id @default(cuid())
  slug                  String   @unique // e.g., "berlin-germany"
  city                  String
  country               String

  // Aggregated data from student submissions
  totalSubmissions      Int      @default(0)
  averageRating         Float?
  averageMonthlyCost    Float?
  averageAccommodationCost Float?

  // Calculated insights from submissions
  topNeighborhoods      Json?    // Array of most mentioned neighborhoods
  commonPros            Json?    // Array of frequently mentioned positives
  commonCons            Json?    // Array of frequently mentioned issues
  budgetBreakdown       Json?    // {groceries: avg, transport: avg, social: avg, etc.}

  // Admin-editable content
  adminTitle            String?  // Custom title override
  adminDescription      String?  // Admin-written description
  adminImageUrl         String?  // Hero image
  adminHighlights       Json?    // Admin-curated highlights
  adminGeneralInfo      Json?    // Visa, climate, transport info

  // Status and metadata
  status                String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  featured              Boolean  @default(false)
  lastCalculated        DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  accommodations        GeneratedAccommodation[]
  courseExchanges       GeneratedCourseExchange[]

  @@unique([city, country])
  @@map("generated_destinations")
}

model GeneratedAccommodation {
  id                   String   @id @default(cuid())
  destinationId        String
  sourceExperienceId   String   // Reference to original ErasmusExperience

  // Student experience data
  studentName          String?  // First name or anonymous
  accommodationType    String   // Dorm, apartment, shared, etc.
  neighborhood         String?
  monthlyRent          Float?
  currency             String   @default("EUR")

  // Experience details
  title                String   // e.g., "Student Dorm in Kreuzberg"
  description          String   // Student's experience
  pros                 Json?    // Array of positive aspects
  cons                 Json?    // Array of negative aspects
  tips                 Json?    // Array of tips for future students
  bookingAdvice        String?  // How they found/booked it

  // Admin controls
  featured             Boolean  @default(false)
  visible              Boolean  @default(true)
  adminNotes           String?  // Internal admin notes

  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  destination          GeneratedDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@map("generated_accommodations")
}

model GeneratedCourseExchange {
  id                   String   @id @default(cuid())
  destinationId        String
  sourceExperienceId   String   // Reference to original ErasmusExperience

  // Student and academic info
  studentName          String?  // First name or anonymous
  hostUniversity       String
  fieldOfStudy         String?
  studyLevel           String?  // Bachelor, Master, etc.
  semester             String?  // Fall 2024, Spring 2025, etc.

  // Academic experience
  title                String   // e.g., "Computer Science at TU Berlin"
  description          String   // Student's academic experience
  courseQuality        Int?     // Rating 1-5
  professorQuality     Int?     // Rating 1-5
  facilityQuality      Int?     // Rating 1-5

  // Course details
  coursesEnrolled      Json?    // Array of course objects
  creditsEarned        Int?     // ECTS credits
  language             String?  // Language of instruction

  // Experience details
  academicChallenges   String?  // Challenges faced
  academicHighlights   String?  // Best parts of academic experience
  tips                 Json?    // Array of academic tips

  // Admin controls
  featured             Boolean  @default(false)
  visible              Boolean  @default(true)
  adminNotes           String?  // Internal admin notes

  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  destination          GeneratedDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@map("generated_course_exchanges")
}

model PartnershipTracking {
  id                   String   @id @default(cuid())
  homeUniversityName   String   // e.g., "University of Cyprus"
  partnerUniversityName String  // e.g., "Technical University of Berlin"
  partnerCity          String
  partnerCountry       String

  // Agreement details
  agreementType        String?  // ERASMUS, BILATERAL, etc.
  fieldOfStudy         String?  // If agreement is field-specific
  isActive             Boolean  @default(true)

  // Performance metrics (auto-calculated)
  totalSubmissions     Int      @default(0)
  averageRating        Float?   // Average student satisfaction
  averageAcademicRating Float?  // Average academic experience rating
  lastSubmissionDate   DateTime?

  // Trend data
  submissionsByYear    Json?    // {2024: 5, 2025: 8, etc.}
  ratingTrend          Json?    // Monthly/yearly rating trends

  // Admin tracking
  adminNotes           String?  // Notes about partnership performance
  needsAttention       Boolean  @default(false) // Flag for partnerships needing review

  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([homeUniversityName, partnerUniversityName, partnerCity])
  @@map("partnership_tracking")
}
