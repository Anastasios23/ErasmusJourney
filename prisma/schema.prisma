generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String             @id @default(cuid())
  firstName         String?
  lastName          String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String             @default("USER")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  studentId         String?
  nationality       String?
  homeCity          String?
  homeCountry       String?
  accounts          Account[]
  sessions          Session[]
  applications      Application[]
  erasmusExperience ErasmusExperience?
  formSubmissions   FormSubmission[]
  stories           Story[]
  storyEngagements  Engagement[]

  @@map("users")
}

model University {
  id                String        @id @default(cuid())
  code              String        @unique
  name              String
  shortName         String
  type              String
  country           String
  city              String
  website           String?
  description       String?
  imageUrl          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  homeAgreements    Agreement[]   @relation("HomeUniversity")
  partnerAgreements Agreement[]   @relation("PartnerUniversity")
  applications      Application[]
  faculties         Faculty[]
  stories           Story[]

  @@map("universities")
}

model Faculty {
  id           String       @id @default(cuid())
  name         String
  description  String?
  universityId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  departments  Department[]
  university   University   @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@map("faculties")
}

model Department {
  id          String      @id @default(cuid())
  name        String
  description String?
  facultyId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  agreements  Agreement[]
  faculty     Faculty     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  programs    Program[]

  @@map("departments")
}

model Program {
  id           String        @id @default(cuid())
  name         String
  level        String
  duration     String
  type         String?
  ects         Int?
  description  String?
  departmentId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  department   Department    @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@map("programs")
}

model Agreement {
  id                  String        @id @default(cuid())
  homeUniversityId    String
  homeDepartmentId    String
  partnerUniversityId String
  partnerCity         String
  partnerCountry      String
  agreementType       String        @default("BOTH")
  notes               String?
  isActive            Boolean       @default(true)
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  homeUniversity      University    @relation("HomeUniversity", fields: [homeUniversityId], references: [id])
  homeDepartment      Department    @relation(fields: [homeDepartmentId], references: [id])
  partnerUniversity   University    @relation("PartnerUniversity", fields: [partnerUniversityId], references: [id])
  applications        Application[]

  @@map("agreements")
}

model Application {
  id               String     @id @default(cuid())
  userId           String
  homeUniversityId String
  programId        String
  agreementId      String
  status           String     @default("DRAFT")
  semester         String?
  academicYear     String?
  duration         String?
  motivation       String?
  languageSkills   Json?
  grades           Json?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  user             User       @relation(fields: [userId], references: [id])
  homeUniversity   University @relation(fields: [homeUniversityId], references: [id])
  program          Program    @relation(fields: [programId], references: [id])
  agreement        Agreement  @relation(fields: [agreementId], references: [id])

  @@map("applications")
}

model Story {
  id           String       @id @default(cuid())
  title        String
  content      String
  excerpt      String?
  imageUrl     String?
  isPublic     Boolean      @default(true)
  isPinned     Boolean      @default(false)
  authorId     String
  universityId String?
  country      String?
  city         String?
  category     String       @default("EXPERIENCE")
  tags         String?
  likes        Int          @default(0)
  views        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  author       User         @relation(fields: [authorId], references: [id])
  university   University?  @relation(fields: [universityId], references: [id])
  engagements  Engagement[]

  @@index([city, country])
  @@map("stories")
}

model Engagement {
  id         String    @id @default(cuid())
  storyId    String
  userId     String
  liked      Boolean   @default(false)
  bookmarked Boolean   @default(false)
  rating     Int       @default(0)
  views      Int       @default(0)
  likes      Int       @default(0)
  comments   Int       @default(0)
  lastViewed DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  story      Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId])
  @@map("story_engagements")
}

model Accommodation {
  id            String   @id @default(cuid())
  name          String
  type          String
  description   String?
  address       String
  city          String
  country       String
  pricePerMonth Decimal?
  currency      String?
  imageUrl      String?
  amenities     Json?
  contactInfo   Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("accommodations")
}

model Destination {
  id                String                  @id @default(cuid())
  name              String
  city              String
  country           String
  description       String?
  imageUrl          String?
  featured          Boolean                 @default(false)
  status            String                  @default("published")
  source            String                  @default("admin_created")
  climate           String?
  costOfLiving      Json?
  highlights        String?
  photos            Json?
  generalInfo       Json?
  aggregatedData    Json?
  adminOverrides    Json?
  submissionCount   Int                     @default(0)
  lastDataUpdate    DateTime                @default(now())
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  linkedSubmissions DestinationSubmission[]

  @@unique([city, country])
  @@map("destinations")
}

model FormSubmission {
  id               String                  @id @default(cuid())
  userId           String
  type             String
  title            String
  data             Json
  status           String                  @default("SUBMITTED")
  adminNotes       String?
  processed        Boolean                 @default(false)
  qualityScore     Float?
  tags             String?
  location         String?
  submissionSource String                  @default("form")
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  destinationLinks DestinationSubmission[]
  user             User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([location, status])
  @@index([type, status])
  @@map("form_submissions")
}

model DestinationSubmission {
  id               String         @id @default(cuid())
  destinationId    String
  submissionId     String
  contributionType String
  weight           Float          @default(1.0)
  adminApproved    Boolean        @default(false)
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  submission       FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  destination      Destination    @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@unique([destinationId, submissionId])
  @@map("destination_submissions")
}

model ErasmusExperience {
  id             String    @id @default(cuid())
  userId         String    @unique
  currentStep    Int       @default(1)
  completedSteps String    @default("[]")
  isComplete     Boolean   @default(false)
  basicInfo      Json?
  courses        Json?
  accommodation  Json?
  livingExpenses Json?
  experience     Json?
  status         String    @default("DRAFT")
  isPublic       Boolean   @default(false)
  lastSavedAt    DateTime  @default(now())
  submittedAt    DateTime?
  publishedAt    DateTime?
  adminNotes     String?
  adminApproved  Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("erasmus_experiences")
}

model CustomDestination {
  id            String   @id @default(cuid())
  destinationId String   @unique
  data          Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("custom_destinations")
}

model AdminDestination {
  id                   String    @id @default(cuid())
  name                 String
  city                 String
  country              String
  description          String
  imageUrl             String?
  climate              String?
  highlights           Json?
  officialUniversities Json?
  generalInfo          Json?
  studentDataCache     Json?
  hasStudentData       Boolean   @default(false)
  lastDataUpdate       DateTime?
  featured             Boolean   @default(false)
  active               Boolean   @default(true)
  createdBy            String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([city, country])
  @@map("admin_destinations")
}

model UniversityExchange {
  id                  String   @id @default(cuid())
  hostUniversity      String
  hostCountry         String
  hostCity            String
  studyLevel          String
  fieldOfStudy        String
  description         String?
  imageUrl            String?
  highlights          String?
  requirements        String?
  applicationDeadline String?
  totalEcts           Int?
  language            String   @default("English")
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("university_exchanges")
}

model GeneratedDestination {
  id                       String                    @id @default(cuid())
  slug                     String                    @unique
  city                     String
  country                  String
  totalSubmissions         Int                       @default(0)
  averageRating            Float?
  averageMonthlyCost       Float?
  averageAccommodationCost Float?
  topNeighborhoods         Json?
  commonPros               Json?
  commonCons               Json?
  budgetBreakdown          Json?
  adminTitle               String?
  adminDescription         String?
  adminImageUrl            String?
  adminHighlights          Json?
  adminGeneralInfo         Json?
  status                   String                    @default("DRAFT")
  featured                 Boolean                   @default(false)
  lastCalculated           DateTime                  @default(now())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  accommodations           GeneratedAccommodation[]
  courseExchanges          GeneratedCourseExchange[]

  @@unique([city, country])
  @@map("generated_destinations")
}

model GeneratedAccommodation {
  id                 String               @id @default(cuid())
  destinationId      String
  sourceExperienceId String
  studentName        String?
  accommodationType  String
  neighborhood       String?
  monthlyRent        Float?
  currency           String               @default("EUR")
  title              String
  description        String
  pros               Json?
  cons               Json?
  tips               Json?
  bookingAdvice      String?
  featured           Boolean              @default(false)
  visible            Boolean              @default(true)
  adminNotes         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  destination        GeneratedDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@map("generated_accommodations")
}

model GeneratedCourseExchange {
  id                 String               @id @default(cuid())
  destinationId      String
  sourceExperienceId String
  studentName        String?
  hostUniversity     String
  fieldOfStudy       String?
  studyLevel         String?
  semester           String?
  title              String
  description        String
  courseQuality      Int?
  professorQuality   Int?
  facilityQuality    Int?
  coursesEnrolled    Json?
  creditsEarned      Int?
  language           String?
  academicChallenges String?
  academicHighlights String?
  tips               Json?
  featured           Boolean              @default(false)
  visible            Boolean              @default(true)
  adminNotes         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  destination        GeneratedDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@map("generated_course_exchanges")
}

model PartnershipTracking {
  id                    String    @id @default(cuid())
  homeUniversityName    String
  partnerUniversityName String
  partnerCity           String
  partnerCountry        String
  agreementType         String?
  fieldOfStudy          String?
  isActive              Boolean   @default(true)
  totalSubmissions      Int       @default(0)
  averageRating         Float?
  averageAcademicRating Float?
  lastSubmissionDate    DateTime?
  submissionsByYear     Json?
  ratingTrend           Json?
  adminNotes            String?
  needsAttention        Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([homeUniversityName, partnerUniversityName, partnerCity])
  @@map("partnership_tracking")
}
